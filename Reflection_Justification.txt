Reflection & Justification
Candidate: Bishwayan Sarkar
1. Introduction
This document provides an in-depth reflection on the design decisions, implementation strategies, AI integrations, testing methodologies, and scalability considerations for the FlytBase Drone Deconfliction system.
2. Design Decisions & Architecture
The system employs a modular 4D conflict detection pipeline. Key architectural components include:
Data Ingestion Module: Loads primary mission waypoints and simulated UAV trajectories.
Preprocessing Layer: Interpolates 3D waypoints into time-stamped 4D points.
KD-Tree Service: Converts 4D points into a searchable index using a time-scaled dimension.
Query Interface: A reusable function that abstracts conflict checks and returns detailed results.
Visualization Component: Plotly-based 3D animation with conflict highlighting.
3. Spatial & Temporal Checks
Temporal data is scaled into spatial dimensions via:
    time_scale = spatial_radius / temporal_tolerance
Each 4D point becomes (x, y, z, t × time_scale), enabling standard KD-Tree queries in Euclidean space. Spatial searches within a given radius automatically enforce temporal proximity when the time component is scaled appropriately.
4. AI Integration
ChatGPT (OpenAI) was leveraged for:
Structuring the conflict detection logic and optimizing KD-Tree queries.
Formatting and refining visualization scripts for clarity and readability.
Drafting documentation components, ensuring consistency in technical communication.

5. Testing Strategy & Edge Cases
Automated tests using pytest cover:
Basic Scenarios: Clear and conflicting missions with single and multiple UAVs.
Edge Cases: Spatially close but temporally separate paths; zero-length trajectories; high-density traffic scenarios.
Performance Tests: Ensuring KD-Tree queries scale linearly with point count.
Edge cases are explicitly defined in test files (e.g., `tests/test_conflict.py`).
6. Scalability to Real-World Data
To handle tens of thousands of drones in real-time:
Distributed KD-Tree Indexing: Partition data by geographic sectors using Hadoop/Spark.
Real-Time Data Pipelines: Kafka streams for ingestion and Apache Flink for windowed processing.
Microservices Architecture: Independent services for data ingestion, indexing, querying, and visualization.
Fault Tolerance & Monitoring: Kubernetes orchestration with Prometheus and Grafana dashboards.
Load Balancing: Dynamic scaling of query services based on traffic patterns.

